---
# tasks file for mysql
  - name: copy sources.list
    template:
      src   : sources.list.j2
      dest  : /etc/apt/sources.list
      owner : root
      group : root
      mode  : '0644'
      backup: yes

  - name: copy MySQL repository
    template:
      src   : mysql.list.j2
      dest  : /etc/apt/sources.list.d/mysql.list
      owner : root
      group : root
      mode  : '0644'
      backup: no

  - name: copy MySQL repository keyring
    copy:
      src   : mysql-apt-config.gpg
      dest  : /usr/share/keyrings/mysql-apt-config.gpg
      owner : root
      group : root
      mode  : '0644'
      backup: no

  - name: install a list of basic packages
    apt:
      pkg:
      - mc
      - nfs-kernel-server
      - telnet
      - tree
      - cifs-utils
      - tcpdump
      - sudo
      - wget
      - curl
      - gnupg2
      - zip
      update_cache: yes
#      - prometheus-node-exporter      

  - name: add line 1 to /etc/hosts
    ansible.builtin.lineinfile:
      path   : /etc/hosts
      line   : '####### add to all hostfiles #######'
      create : yes
      owner  : root
      group  : root
      mode   : '0644'

  - name: add line 2 to /etc/hosts
    ansible.builtin.lineinfile:
      path   : /etc/hosts
      line   : '{{ backup }}	backup.{{ domain }}	#Backup'
      create : yes
      owner  : root
      group  : root
      mode   : '0644'

  - name: add line 3 to /etc/hosts
    ansible.builtin.lineinfile:
      path   : /etc/hosts
      line   : '{{ nginx }}	nginx.{{ domain }}		#Nginx'
      create : yes
      owner  : root
      group  : root
      mode   : '0644'

  - name: add line 4 to /etc/hosts
    ansible.builtin.lineinfile:
      path   : /etc/hosts
      line   : '{{ apache1 }}	apache1.{{ domain }}		#Apache 1'
      create : yes
      owner  : root
      group  : root
      mode   : '0644'

  - name: add line 5 to /etc/hosts
    ansible.builtin.lineinfile:
      path   : /etc/hosts
      line   : '{{ apache2 }}	apache2.{{ domain }}		#Apache 2'
      create : yes
      owner  : root
      group  : root
      mode   : '0644'

  - name: add line 6 to /etc/hosts
    ansible.builtin.lineinfile:
      path   : /etc/hosts
      line   : '{{ mysqlsrs }}	mysqlsrs.{{ domain }}	#MySQL source'
      create : yes
      owner  : root
      group  : root
      mode   : '0644'

  - name: add line 7 to /etc/hosts
    ansible.builtin.lineinfile:
      path   : /etc/hosts
      line   : '{{ mysqlrep }}	mysqlrep.{{ domain }}	#MySQL replica'
      create : yes
      owner  : root
      group  : root
      mode   : '0644'

  - name: add line 8 to /etc/hosts
    ansible.builtin.lineinfile:
      path   : /etc/hosts
      line   : '{{ monitor }}	monitor.{{ domain }}		#Monitoring'
      create : yes
      owner  : root
      group  : root
      mode   : '0644'

  - name: add line 9 to /etc/hosts
    ansible.builtin.lineinfile:
      path   : /etc/hosts
      line   : '{{ elk }}	elk.{{ domain }}		#ELK stack'
      create : yes
      owner  : root
      group  : root
      mode   : '0644'

#  - name: add line 10 to /etc/hosts
#    ansible.builtin.lineinfile:
#      path   : /etc/hosts
#      line   : '10.68.7.18	ansible.init6.ru		#Ansible'
#      create : yes
#      owner  : root
#      group  : root
#      mode   : '0644'

  - name: add line 11 to /etc/hosts
    ansible.builtin.lineinfile:
      path   : /etc/hosts
      line   : '###########################'
      create : yes
      owner  : root
      group  : root
      mode   : '0644'

  - name: Download Zabbix repo package
    get_url:
      url: "https://repo.zabbix.com/zabbix/7.2/release/debian/pool/main/z/zabbix-release/zabbix-release_latest_7.2+debian12_all.deb"
      dest: "/tmp/zabbix-release_latest_7.2+debian12_all.deb"

  - name: Install Zabbix repo package
    apt:
      deb: "/tmp/zabbix-release_latest_7.2+debian12_all.deb"

  - name: Zabbix agent 2 install - install 7.2 latest agent
    apt:
      pkg:
      - zabbix-agent2
      update_cache: yes

  - name: make zabbix_agent2.conf from template
    template: 
      src: mysqlsrs_zabbix_agent2.conf.j2
      dest: /etc/zabbix/zabbix_agent2.conf
      owner: root
      group: root
      mode: '644'
    when: inventory_hostname == "mysqlsrs"

  - name: make zabbix_agent2.conf from template
    template: 
      src: mysqlrep_zabbix_agent2.conf.j2
      dest: /etc/zabbix/zabbix_agent2.conf
      owner: root
      group: root
      mode: '644'
    when: inventory_hostname == "mysqlrep"

  - name: make zabbix_agentd.psk from template
    template: 
      src: zabbix_agentd.psk.j2
      dest: /etc/zabbix/zabbix_agentd.psk
      owner: zabbix
      group: zabbix
      mode: '400'
  
  - name: restart Zabbix agent 2
    systemd:
      unit: zabbix-agent2.service
      state: restarted
      enabled: yes
      daemon_reload: yes

  - name: Stop MySQL service
    service:
       name: mysql
       state: stopped
    ignore_errors: yes

  - name: Uninstall MySQL and related packages
    apt:
      name: "{{ item }}"
      state: absent
      autoremove: yes
      purge: yes
    loop:
      - mysql-server
      - mysql-client
      - mysql-common
      - mysql-server-core-8.0
      - mysql-client-core-8.0
      - libmysqlclient-dev

  - name: Remove MySQL configuration and data directories
    file:
      path: "{{ item }}"
      state: absent
    loop:
      - /etc/mysql
      - /var/lib/mysql
      - /var/log/mysql
      - /var/log/mysql.*
      - /var/run/mysqld 

  - name: Ensure MySQL user and group are removed
    user:
      name: mysql
      state: absent

  - name: Remove MySQL package cache
    file:
      path: "/var/cache/apt/archives/mysql*"
      state: absent
    ignore_errors: yes

  - name: mysqlsrs and mysqlrep - Update repositories cache and install mysql
    apt:
      pkg:
      - mysql-server
      update_cache: yes

  - name: copy MySQL config
    copy:
      src   : mysqld._srs.cnf
      dest  : /etc/mysql/mysql.conf.d/mysqld.cnf
      owner : root
      group : root
      mode  : '0644'
      backup: yes
    when: inventory_hostname == "mysqlsrs"

  - name: restart MySQL
    systemd:
      unit: mysql.service
      state: restarted
      enabled: yes
      daemon_reload: yes
    when: inventory_hostname == "mysqlsrs"

  - name: Wait about 5 seconds
    shell: 
      cmd: apt update -y
    when: inventory_hostname == "mysqlsrs"

  - name: Execute command create user for MySQL source
    shell: 
      cmd: mysql -e "CREATE USER repl@'%' IDENTIFIED WITH 'caching_sha2_password' BY 'oTUSlave#2020';"
    when: inventory_hostname == "mysqlsrs"

  - name: Execute command mysqlsrs replika setup
    shell: 
      cmd: mysql -e "GRANT REPLICATION SLAVE ON *.* TO repl@'%';"
    when: inventory_hostname == "mysqlsrs"

  - name: Execute command mysqlsrs replika setup
    shell: 
      cmd: mysql -e "FLUSH PRIVILEGES;"
    when: inventory_hostname == "mysqlsrs"

  - name: create a directory if it does not exist /www
    ansible.builtin.file:
      path   : /www
      state  : directory
      mode   : '0777'
    when: inventory_hostname == "mysqlrep"

  - name: create a directory if it does not exist /backup
    ansible.builtin.file:
      path   : /backup
      state  : directory
      mode   : '0777'
    when: inventory_hostname == "mysqlrep"

  - name: Add line NFS /www to /etc/fstab
    ansible.builtin.lineinfile:
      path   : /etc/fstab
      line   : backup.{{ domain }}:/www                          /www        nfs   rw        0  0
      create : yes
      owner  : root
      group  : root
      mode   : '0644'
    when: inventory_hostname == "mysqlrep"

  - name: Add line NFS /backup to /etc/fstab
    ansible.builtin.lineinfile:
      path   : /etc/fstab
      line   : backup.{{ domain }}:/backup                          /backup        nfs   rw        0  0
      create : yes
      owner  : root
      group  : root
      mode   : '0644'
    when: inventory_hostname == "mysqlrep"

  - name: Execute command mount /www and /backup
    shell: 
      cmd: "systemctl daemon-reload && mount -a"
    when: inventory_hostname == "mysqlrep"
  
  - name: copy MySQL replica config
    template:
      src   : mysqld_rep.cnf.j2
      dest  : /etc/mysql/mysql.conf.d/mysqld.cnf
      owner : root
      group : root
      mode  : '0644'
      backup: yes
    when: inventory_hostname == "mysqlrep"

  - name: restart MySQL on mysqlrep
    systemd:
      unit: mysql.service
      state: restarted
      enabled: yes
      daemon_reload: yes
    when: inventory_hostname == "mysqlrep"

  - name: create a directory if it does not exist /scripts
    ansible.builtin.file:
      path   : /scripts
      state  : directory
      mode   : '0755'
    when: inventory_hostname == "mysqlrep"

  - name: copy backup and restore scripts backup_mysql.sh
    copy:
      src   : backup_mysql.sh
      dest  : /scripts/backup_mysql.sh
      owner : root
      group : root
      mode  : '0755'
      backup: yes
    when: inventory_hostname == "mysqlrep"

  - name: copy backup and restore scripts backup_mysql.sh
    copy:
      src   : backup_www.sh
      dest  : /scripts/backup_www.sh
      owner : root
      group : root
      mode  : '0755'
      backup: yes
    when: inventory_hostname == "mysqlrep"

  - name: copy backup and restore scripts restore_www.sh
    copy:
      src   : restore_www.sh
      dest  : /scripts/restore_www.sh
      owner : root
      group : root
      mode  : '0755'
      backup: yes
    when: inventory_hostname == "mysqlrep"

  - name: copy cron file
    copy:
      src   : root
      dest  : /var/spool/cron/crontabs/root
      owner : root
      group : root
      mode  : '0600'
      backup: yes
    when: inventory_hostname == "mysqlrep"

  - name: restart cron service
    systemd:
      unit: cron.service
      state: restarted
      enabled: yes
      daemon_reload: yes
    when: inventory_hostname == "mysqlrep"

  - name: Execute command MySQL stop replica
    shell: 
      cmd: mysql -e "STOP REPLICA;"
    when: inventory_hostname == "mysqlrep"

  - name: Execute command turn on MySQL replica
    shell: 
      cmd: mysql -e "CHANGE REPLICATION SOURCE TO SOURCE_HOST='mysqlsrs.{{ domain }}', SOURCE_USER='repl', SOURCE_PASSWORD='oTUSlave#2020', SOURCE_AUTO_POSITION = 1, GET_SOURCE_PUBLIC_KEY = 1;"
    when: inventory_hostname == "mysqlrep"

  - name: Execute command MySQL start replica
    shell: 
      cmd: mysql -e "START REPLICA;"
    when: inventory_hostname == "mysqlrep"

  - name: create a directory if it does not exist /scripts
    ansible.builtin.file:
      path   : /scripts
      state  : directory
      mode   : '0755'
    when: inventory_hostname == "mysqlsrs"

  - name: copy backup and restore scripts restore_mysql.sh
    template:
      src   : restore_mysql_sh.j2
      dest  : /scripts/restore_mysql.sh
      owner : root
      group : root
      mode  : '0755'
      backup: yes
    when: inventory_hostname == "mysqlsrs"

  - name: copy backup and restore scripts backup_mysql_srs.sh.j2
    template:
      src   : backup_mysql_srs.sh.j2
      dest  : /scripts/backup_mysql_srs.sh
      owner : root
      group : root
      mode  : '0755'
      backup: yes
    when: inventory_hostname == "mysqlsrs" 

  - name: restore Wordpress MySQL database
    shell: 
      cmd: "/scripts/restore_mysql.sh"
    when: inventory_hostname == "mysqlsrs"

  - name: Ensure /install_tmp directory exists
    file:
      path: /install_tmp
      state: directory
      mode: '0755'
      owner: root
      group: root  

  - name: Check file exists /install_tmp/filebeat_8.9.1_amd64.deb
    stat:
      path: /install_tmp/filebeat_8.9.1_amd64.deb
    register: filebeat_deb

  - name: Downloading filebeat_8.9.1_amd64.deb
    get_url:
      url: https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-8.9.1-amd64.deb
      dest: /install_tmp/filebeat_8.9.1_amd64.deb
      mode: '0644'
    when: not filebeat_deb.stat.exists

  - name: install Filebeat for NGINX
    apt:
      deb: /install_tmp/filebeat_8.9.1_amd64.deb

  - name: rm filebeat_8.9.1_amd64.deb file after install
    file:
      path: /install_tmp/filebeat_8.9.1_amd64.deb
      state: absent

  - name: transfer config for Filebeat
    template: 
      src: filebeat_srs.yml.j2
      dest: /etc/filebeat/filebeat.yml
      owner: root
      group: root
      mode: '600'
    when: inventory_hostname == "mysqlsrs"

  - name: transfer config for Filebeat
    template: 
      src: filebeat_rep.yml.j2
      dest: /etc/filebeat/filebeat.yml
      owner: root
      group: root
      mode: '600'
    when: inventory_hostname == "mysqlrep"

  - name: restart Filebeat
    systemd:
      unit: filebeat.service
      state: restarted
      enabled: yes
      daemon_reload: yes

  - name: rm temp install directory /install_tmp
    file:
      path: /install_tmp
      state: absent
...
